server:
  port: ${services.clouddriver.port:7002}
  address: ${services.clouddriver.host:localhost}

redis:
  connection: ${services.redis.connection:redis://localhost:6379}

udf:
  # Controls whether UserDataProviders are used to populate user data of new
  # server groups. If false, user data is copied over from ancestor server
  # groups on both CopyLastAsgAtomicOperation and
  # ModifyAsgLaunchConfigurationOperation (only if no user data is provided
  # on the given request).
  enabled: ${services.clouddriver.aws.udf.enabled:true}

default:
  account:
    env: ${providers.aws.primaryCredentials.name}

aws:
  # AWS Credentials are passed either as environment variables or through
  # a standard AWS file $HOME/.aws/credentials
  # See providers.aws.primaryCredentials in spinnaker.yml for more
  # info on setting environment variables.
  enabled: ${providers.aws.enabled:false}
  defaults:
    iamRole: ${providers.aws.defaultIAMRole:BaseIAMRole}
  defaultRegions:
    - name: ${providers.aws.defaultRegion:us-east-1}
  defaultFront50Template: ${services.front50.baseUrl}
  defaultKeyPairTemplate: ${providers.aws.defaultKeyPairTemplate}

azure:
  enabled: ${providers.azure.enabled:false}

  accounts:
    - name: ${providers.azure.primaryCredentials.name}
      clientId: ${providers.azure.primaryCredentials.clientId}
      appKey: ${providers.azure.primaryCredentials.appKey}
      tenantId: ${providers.azure.primaryCredentials.tenantId}
      subscriptionId: ${providers.azure.primaryCredentials.subscriptionId}
      defaultResourceGroup: ${providers.azure.primaryCredentials.defaultResourceGroup}
      defaultKeyVault: ${providers.azure.primaryCredentials.defaultKeyVault}

google:
  enabled: ${providers.google.enabled:false}

  accounts:
    - name: ${providers.google.primaryCredentials.name}
      project: ${providers.google.primaryCredentials.project}
      jsonPath: ${providers.google.primaryCredentials.jsonPath}
      consul:
        enabled: ${providers.google.primaryCredentials.consul.enabled:false}
      # Specify the project id of each GCP project whose images you want indexed and
      # made available to this account. Each project must have granted the IAM role
      # compute.imageUser to the service account associated with the json key referenced
      # above, as well as to the 'Google APIs service account' automatically created for
      # the project being managed (should look similar to
      # 12345678912@cloudservices.gserviceaccount.com).
      # You can read more about sharing images across GCP projects here:
      # https://cloud.google.com/compute/docs/images/sharing-images-across-projects#granting_a_user_access_to_images
      # imageProjects:

cf:
  enabled: ${providers.cf.enabled:false}

  accounts:
    - name: ${providers.cf.primaryCredentials.name}
      api: ${providers.cf.primaryCredentials.api}
      console: ${providers.cf.primaryCredentials.console}
      org: ${providers.cf.defaultOrg}
      space: ${providers.cf.defaultSpace}
      username: ${providers.cf.account.name:}
      password: ${providers.cf.account.password:}

kubernetes:
  enabled: ${providers.kubernetes.enabled:false}
  accounts:
    - name: ${providers.kubernetes.primaryCredentials.name}
      dockerRegistries:
        - accountName: ${providers.kubernetes.primaryCredentials.dockerRegistryAccount}

openstack:
  enabled: ${providers.openstack.enabled:false}
  accounts:
    - name: ${providers.openstack.primaryCredentials.name}
      authUrl: ${providers.openstack.primaryCredentials.authUrl}
      username: ${providers.openstack.primaryCredentials.username}
      password: ${providers.openstack.primaryCredentials.password}
      projectName: ${providers.openstack.primaryCredentials.projectName}
      domainName: ${providers.openstack.primaryCredentials.domainName:Default}
      regions: ${providers.openstack.primaryCredentials.regions}
      insecure: ${providers.openstack.primaryCredentials.insecure:false}
      userDataFile: ${providers.openstack.primaryCredentials.userDataFile:}

      # The Openstack API requires that the load balancer be in an ACTIVE
      # state for it to create associated relationships (i.e. listeners,
      # pools, monitors). Each modification will cause the load balancer to
      # go into a PENDING state and back to ACTIVE once the change has been
      # made. Depending on your implementation, the timeout and polling
      # intervals would need to be adjusted, especially if testing out
      # Spinnaker with Devstack or another resource constrained enviroment
      lbaas:
        pollTimeout: 60
        pollInterval: 5

appengine:
  enabled: ${providers.appengine.enabled:false}

  accounts:
    - name: ${providers.appengine.primaryCredentials.name}
      project: ${providers.appengine.primaryCredentials.project}
      jsonPath: ${providers.appengine.primaryCredentials.jsonPath}
      sshPrivateKeyFilePath: ${providers.appengine.primaryCredentials.sshPrivateKeyFilePath}
      sshPrivateKeyPassphrase: ${providers.appengine.primaryCredentials.sshPrivateKeyPassphrase}
      gitHttpsUsername: ${providers.appengine.primaryCredentials.gitHttpsUsername}
      gitHttpsPassword: ${providers.appengine.primaryCredentials.gitHttpsPassword}
      githubOAuthAccessToken: ${providers.appengine.primaryCredentials.githubOAuthAccessToken}

dockerRegistry:
  enabled: ${providers.dockerRegistry.enabled:false}
  accounts:
    - name: ${providers.dockerRegistry.primaryCredentials.name}
      address: ${providers.dockerRegistry.primaryCredentials.address}
      username: ${providers.dockerRegistry.primaryCredentials.username:}
      passwordFile: ${providers.dockerRegistry.primaryCredentials.passwordFile:}
      repositories: ${providers.dockerRegistry.primaryCredentials.repository:}

credentials:
  primaryAccountTypes: ${providers.aws.primaryCredentials.name}, ${providers.google.primaryCredentials.name}, ${providers.cf.primaryCredentials.name}, ${providers.azure.primaryCredentials.name}
  challengeDestructiveActionsEnvironments: ${providers.aws.primaryCredentials.name}, ${providers.google.primaryCredentials.name}, ${providers.cf.primaryCredentials.name}, ${providers.azure.primaryCredentials.name}


spectator:
  applicationName: ${spring.application.name}
  webEndpoint:
    enabled: ${services.spectator.webEndpoint.enabled:false}
    prototypeFilter:
      path: ${services.spectator.webEndpoint.prototypeFilter.path:}

  stackdriver:
    enabled: ${services.stackdriver.enabled}
    projectName: ${services.stackdriver.projectName}
    credentialsPath: ${services.stackdriver.credentialsPath}
